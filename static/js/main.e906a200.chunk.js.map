{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","Layout","Content","Footer","App","react_default","a","createElement","layout","className","menu","theme","mode","defaultSelectedKeys","style","lineHeight","Item","key","padding","breadcrumb","margin","background","minHeight","row","col","span","input_number","min","max","defaultValue","es_radio","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAQQA,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OAmDVC,mLA9CX,OAEEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,UAAU,UACpBJ,EAAAC,EAAAC,cAACP,EAAD,KACEK,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACfJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEC,MAAM,OACNC,KAAK,aACLC,oBAAqB,CAAC,KACtBC,MAAO,CAAEC,WAAY,SAErBV,EAAAC,EAAAC,cAACG,EAAA,EAAKM,KAAN,CAAWC,IAAI,KAAf,SACAZ,EAAAC,EAAAC,cAACG,EAAA,EAAKM,KAAN,CAAWC,IAAI,KAAf,SACAZ,EAAAC,EAAAC,cAACG,EAAA,EAAKM,KAAN,CAAWC,IAAI,KAAf,WAGJZ,EAAAC,EAAAC,cAACL,EAAD,CAASY,MAAO,CAAEI,QAAS,WACzBb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAYL,MAAO,CAAEM,OAAQ,WAC3Bf,EAAAC,EAAAC,cAACY,EAAA,EAAWH,KAAZ,aACAX,EAAAC,EAAAC,cAACY,EAAA,EAAWH,KAAZ,aACAX,EAAAC,EAAAC,cAACY,EAAA,EAAWH,KAAZ,aAEFX,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAAEO,WAAY,OAAQH,QAAS,GAAII,UAAW,MAEtDjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACJlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,KAAM,GAAGpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAaC,IAAK,EAAGC,IAAK,GAAIC,aAAc,KAC1DxB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,KAAM,GAAGpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAaC,IAAK,EAAGC,IAAK,GAAIC,aAAc,IAA1D,KACAxB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,KAAM,GAAGpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAaC,IAAK,EAAGC,IAAK,GAAIC,aAAc,IAA1D,KACAxB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,KAAM,GAAGpB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,eAAd,IAAoCzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,kBAUtCzB,EAAAC,EAAAC,cAACJ,EAAD,CAAQW,MAAO,CAAEiB,UAAW,WAA5B,kDAxCcC,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e906a200.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport { Row, Col } from 'antd';\nimport { Radio } from 'antd';\nimport { InputNumber } from 'antd';\n\nconst { Header, Content, Footer } = Layout;\n\n\nclass App extends Component {\n  render() {\n    return (\n\n      <Layout className=\"layout\">\n    <Header>\n      <div className=\"logo\" />\n      <Menu\n        theme=\"dark\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={['2']}\n        style={{ lineHeight: '64px' }}\n      >\n        <Menu.Item key=\"1\">nav 1</Menu.Item>\n        <Menu.Item key=\"2\">nav 2</Menu.Item>\n        <Menu.Item key=\"3\">nav 3</Menu.Item>\n      </Menu>\n    </Header>\n    <Content style={{ padding: '0 50px' }}>\n      <Breadcrumb style={{ margin: '16px 0' }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>List</Breadcrumb.Item>\n        <Breadcrumb.Item>App</Breadcrumb.Item>\n      </Breadcrumb>\n      <div style={{ background: '#fff', padding: 24, minHeight: 280 }}>\n\n          <Row>\n      <Col span={6}><InputNumber min={1} max={10} defaultValue={3}  /></Col>\n      <Col span={6}><InputNumber min={1} max={10} defaultValue={3}  /> </Col>\n      <Col span={6}><InputNumber min={1} max={10} defaultValue={3}  /> </Col>\n      <Col span={6}><Radio>hombre</Radio> <Radio>mujer</Radio></Col>\n    </Row>\n\n\n\n\n\n\n      </div>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>\n      Ant Design Â©2018 Created by Ant UED\n    </Footer>\n  </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}